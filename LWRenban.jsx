var g_stylename;	//連番の対象の文字スタイル名var g_zerotype;	//ゼロパディングタイプ（0：なし、1：二桁、2：三桁）main();function main(){	//Make certain that user interaction (display of dialogs, etc.) is turned on.	//app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;	if (app.documents.length != 0){		//ダイアログ表示		if(myDisplayDialog() == true){				//連番実行			doRenban();		}	} else { 	   alert ("ドキュメントを開いてください");	}}function myDisplayDialog(){	//文字スタイルの一覧を取得	var myDocument = app.activeDocument;	var l = myDocument.characterStyles.length;	var stylenames = [];	for(var i=0; i<l; i++){		stylenames.push(myDocument.characterStyles.item(i).name);	}		//ダイアログ生成	var myDialog = app.dialogs.add({name:"Renban"});	with(myDialog.dialogColumns.add()){		//説明ラベル		staticTexts.add({staticLabel:"特定の文字スタイルを設定した数字に対して連番を挿入します"});		staticTexts.add({staticLabel:"数値がテキストフレームに入っていないとうまくY座標を取れないかも"});		staticTexts.add({staticLabel:"表のセルは未対応です"});		//パネルを追加		with(borderPanels.add()){			//ラベル			with(dialogColumns.add()){				staticTexts.add({staticLabel:"文字スタイルを選択"});			}			//リストボックス			with(dialogColumns.add()){				var listboxCharaStyle = dropdowns.add					({stringList: stylenames, selectedIndex:0});			}		}		//パネルを追加		with(borderPanels.add()){			//ラベル			with(dialogColumns.add()){				staticTexts.add({staticLabel:"ゼロ埋めの形式"});			}			//ラジオボタン			var myRadioButtonGroup = radiobuttonGroups.add();			with(myRadioButtonGroup){				radiobuttonControls.add({staticLabel:"1"});				radiobuttonControls.add({staticLabel:"01", checkedState:true});				radiobuttonControls.add({staticLabel:"001"});			}		}	}		myReturn = myDialog.show();	if (myReturn == true){		g_stylename = stylenames[listboxCharaStyle.selectedIndex];		g_zerotype = myRadioButtonGroup.selectedButton;		myDialog.destroy();		return true;	} else {		myDialog.destroy();		return false;	}		}//連番実行function doRenban(){	//alert("スタイルは" + g_stylename);	//alert("ゼロ埋め形式は" + g_zerotype);	var myDocument = app.activeDocument;	//前回の検索結果を消去	app.findGrepPreferences = NothingEnum.nothing;	app.changeGrepPreferences = NothingEnum.nothing;	//検索条件を設定	app.findChangeGrepOptions.includeFootnotes = false;	app.findChangeGrepOptions.includeHiddenLayers = false;	app.findChangeGrepOptions.includeLockedLayersForFind = false;	app.findChangeGrepOptions.includeLockedStoriesForFind = false;	app.findChangeGrepOptions.includeMasterPages = false;	app.findGrepPreferences.findWhat = "[0-9]+";	//1つ以上の数値	app.findGrepPreferences.appliedCharacterStyle = g_stylename;	//文字スタイル	//検索実行	var findresult = myDocument.findGrep();	//ページと座標を調べる	var exresult = explorePageAndPos(findresult);	//並べ替え	exresult.sort(function(a, b){		//まずページ番号で比較		if(parseInt(a.pagenumber) > parseInt(b.pagenumber)) return 1;		if(parseInt(a.pagenumber) < parseInt(b.pagenumber)) return -1;		//同ページ内ならy座標で比較		if(parseInt(a.pagenumber) == parseInt(b.pagenumber)){			if(a.cordy > b.cordy) return 1;			if(a.cordy < b.cordy) return -1;		}		return 0;	});	//連番挿入	for(var i=0; i<exresult.length; i++){		var renban = String(i + 1);		if(g_zerotype > 0){			renban = ('000' + renban).slice(-(g_zerotype+1));		}		exresult[i].text.contents = renban;	}	//検索結果を消去	app.findGrepPreferences = NothingEnum.nothing;	app.changeGrepPreferences = NothingEnum.nothing;}//parentをさかのぼって位置とページを調べるfunction explorePageAndPos(findresult){	var newresult = [];		for(var i=0; i<findresult.length; i++){		var parent = null, x = null, y = null, page = null;		var current = findresult[i];		do{			parent = current.parent;			//parentがstoryの場合はテキストフレームの親を探す			if(parent.constructor.name == 'Story'){				parent = current.parentTextFrames[0];			}			//parentがTextFrameの場合は座標を調べる			if(parent.constructor.name ==  'TextFrame'){				if(y == null){					var bounds = parent.visibleBounds;					x = bounds[1];					y = bounds[0];					//alert('cord' + x + ':' + y);				}			}			//parentがPageの場合はページを調べる			if(parent.constructor.name ==  'Page'){				page = parent.name;				//alert('page'+page);				break;	//ループ脱出			}			current = parent;		}while(current.constructor.name != 'document');		newresult.push({			text: findresult[i], cordy: y, cordx: x, pagenumber: page		});	}	return newresult;}